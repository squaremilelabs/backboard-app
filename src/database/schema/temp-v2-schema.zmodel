generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  output = '../generated/prisma-schema/schema.prisma'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "../generated/hooks"
  target = "react"
  version = "v5"
}

model User {
  id                    String           @id @deny('update', true) // Should match clerk auth ID
  created_at            DateTime         @default(now()) @db.Timestamptz @deny('update', true)
  updated_at            DateTime         @updatedAt @db.Timestamptz

  display_name          String           @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  email                 String           @email @unique
  image_href            String?          @url
  color                 String?

  associated_as_persons Person[]         @relation('associated_as_persons')

  /** CREATED RECORDS */
  persons               Person[]         @relation('created_persons')
  topics                Topic[]
  resources             Resource[]
  tasklists             Tasklist[]
  tasks                 Task[]
  topic_members         TopicMember[]
  tasklist_members      TasklistMember[]

  @@auth
  @@map("users")
}

model Person {
  id                          String           @id @default(cuid())
  created_at                  DateTime         @default(now()) @db.Timestamptz
  updated_at                  DateTime         @updatedAt @db.Timestamptz
  created_by_id               String           @default(auth().id)
  created_by                  User             @relation('created_persons', fields: [created_by_id], references: [id])

  display_name                String           @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  @@unique([created_by_id, display_name])

  image_href                  String?          @url
  color                       String?

  topic_member_assignments    TopicMember[]
  tasklist_member_assignments TasklistMember[]

  // The user who is later associated with this person
  associated_user_id          String?
  associated_user             User?            @relation('associated_as_persons', fields: [associated_user_id], references: [id])

  archived_at                 DateTime?        @db.Timestamptz

  @@map("persons")
}

model Topic {
  id            String        @id @default(cuid())
  created_at    DateTime      @default(now()) @db.Timestamptz
  updated_at    DateTime      @updatedAt @db.Timestamptz
  created_by_id String        @default(auth().id)
  created_by    User          @relation(fields: [created_by_id], references: [id])

  title         String        @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description   String?       @trim

  members       TopicMember[]
  tasklists     Tasklist[]
  resources     Resource[]

  archived_at   DateTime?     @db.Timestamptz

  @@map("topics")
}

model Resource {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now()) @db.Timestamptz
  updated_at    DateTime  @updatedAt @db.Timestamptz
  created_by_id String    @default(auth().id)
  created_by    User      @relation(fields: [created_by_id], references: [id])

  topic_id      String
  topic         Topic     @relation(fields: [topic_id], references: [id])

  title         String    @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  content       String    @trim

  archived_at   DateTime? @db.Timestamptz

  @@map("resources")
}

model Tasklist {
  id                    String            @id @default(cuid())
  created_at            DateTime          @default(now()) @db.Timestamptz
  updated_at            DateTime          @updatedAt @db.Timestamptz
  created_by_id         String            @default(auth().id)
  created_by            User              @relation(fields: [created_by_id], references: [id])

  topic_id              String
  topic                 Topic             @relation(fields: [topic_id], references: [id])

  inherit_topic_members Boolean           @default(true)
  custom_members        TasklistMember[] // can only be added if inherit_topic_members is false. custom members must be a member of the topic.

  title                 String            @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description           String?           @trim
  target                RelativeTarget    @default(NO_TARGET)

  tasks                 Task[]
  task_order            TasklistTaskOrder @json

  archived_at           DateTime?         @db.Timestamptz

  @@map("tasklists")
}

model Task {
  id                String     @id @default(cuid())
  created_at        DateTime   @default(now()) @db.Timestamptz
  updated_at        DateTime   @updatedAt @db.Timestamptz
  created_by_id     String     @default(auth().id)
  created_by        User       @relation(fields: [created_by_id], references: [id])

  tasklist_id       String
  tasklist          Tasklist   @relation(fields: [tasklist_id], references: [id])

  title             String     @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description       String?    @trim
  size_minutes      Int
  status            TaskStatus @default(DRAFT)
  status_changed_at DateTime   @default(now()) @db.Timestamptz

  archived_at       DateTime?  @db.Timestamptz

  @@map("tasks")
}

/** MEMBER ASSIGNMENTS */

model TopicMember {
  id            String     @id @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz
  updated_at    DateTime   @updatedAt @db.Timestamptz
  created_by_id String     @default(auth().id)
  created_by    User       @relation(fields: [created_by_id], references: [id])

  topic_id      String
  topic         Topic      @relation(fields: [topic_id], references: [id])
  person_id     String
  person        Person     @relation(fields: [person_id], references: [id])
  @@unique([topic_id, person_id])

  member_type   MemberType @default(VIEWER)

  @@map("topic_members")
}

model TasklistMember {
  id            String     @id @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz
  updated_at    DateTime   @updatedAt @db.Timestamptz
  created_by_id String     @default(auth().id)
  created_by    User       @relation(fields: [created_by_id], references: [id])

  tasklist_id   String
  tasklist      Tasklist   @relation(fields: [tasklist_id], references: [id])
  person_id     String
  person        Person     @relation(fields: [person_id], references: [id])
  @@unique([tasklist_id, person_id])

  member_type   MemberType @default(VIEWER)

  @@map("tasklist_members")
}

/** ENUMS & TYPES */

enum TaskStatus {
  DRAFT
  TODO
  DONE
  @@map("TASK_STATUS")
}

type TasklistTaskOrder {
  FULL  String[]
  DRAFT String[]
  TODO  String[]
  DONE  String[]
}

enum RelativeTarget {
  TODAY
  THIS_WEEK
  NEXT_WEEK
  THIS_MONTH
  NEXT_MONTH
  SOMEDAY
  NO_TARGET
  @@map("RELATIVE_TARGET")
}

enum MemberType {
  VIEWER
  CONTRIBUTOR
  OWNER
  @@map("MEMBER_TYPE")
}