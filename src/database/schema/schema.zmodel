generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  output = '../generated/prisma-schema/schema.prisma'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "../generated/hooks"
  target = "react"
  version = "v5"
}

model User {
  id               String     @id @deny('update', true) // Should match clerk auth ID
  created_at       DateTime   @default(now()) @db.Timestamptz @deny('update', true)
  updated_at       DateTime   @updatedAt @db.Timestamptz

  display_name     String     @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  email            String     @email @unique
  image_href       String?    @url

  tasks            Task[]
  tasklists        Tasklist[]
  timeslots        Timeslot[]

  inbox_task_order String[]

  @@auth
  @@map("users")
  @@allow("read", true)
  @@allow("update", auth().id == id)
}

abstract model WithMetadata {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now()) @db.Timestamptz
  updated_at    DateTime  @updatedAt @db.Timestamptz
  created_by_id String    @default(auth().id)
  created_by    User      @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  archived_at   DateTime? @db.Timestamptz
}

model Task extends WithMetadata {
  title                String     @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  content              String?
  status               TaskStatus @default(DRAFT)
  size_minutes         Int        @default(5) @gte(1, "size_minutes must be greater than 0")
  completed_at         DateTime?  @db.Timestamptz

  tasklist_id          String?
  tasklist             Tasklist?  @relation(fields: [tasklist_id], references: [id], onDelete: SetNull)

  timeslot_id          String?
  timeslot_tasklist_id String?
  timeslot             Timeslot?  @relation(fields: [timeslot_id, timeslot_tasklist_id], references: [id, tasklist_id], onDelete: SetNull)

  @@map("tasks")
  @@allow("all", created_by_id == auth().id)

  @@validate(status != "DONE" || completed_at != null, "completed_at must be set if status is DONE")
  @@validate(timeslot_id == null || timeslot_tasklist_id == tasklist_id, "timeslot_tasklist_id must match tasklist_id if timeslot_id is set")
}


enum TaskStatus {
  TODO
  DRAFT
  DONE
  @@map("TASK_STATUS")
}

model Tasklist extends WithMetadata {
  title      String     @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  content    String?
  task_order String[]

  emoji_code String?
  emoji_char String?

  tasks      Task[]
  timeslots  Timeslot[]

  @@map("tasklists")
  @@allow("all", created_by_id == auth().id)
}

model Timeslot extends WithMetadata {
  start_timestamp DateTime @db.Timestamptz
  end_timestamp   DateTime @db.Timestamptz
  task_order      String[]

  tasklist_id     String
  tasklist        Tasklist @relation(fields: [tasklist_id], references: [id], onDelete: Cascade)

  tasks           Task[]

  @@map("timeslots")
  @@unique([id, tasklist_id])
  @@allow("all", created_by_id == auth().id)
}
