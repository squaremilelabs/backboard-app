generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  output = '../generated/prisma-schema/schema.prisma'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "../generated/hooks"
  target = "react"
  version = "v5"
}

/** Abstract Models */

abstract model WithMetadata {
  id         String   @id @default(cuid())
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
}

abstract model WithBaseRecordData {
  title       String    @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  archived_at DateTime? @db.Timestamptz
}

abstract model WithClipboard {
  clipboard_id String    @unique
  clipboard    Clipboard @relation(fields: [clipboard_id], references: [id], onDelete: Cascade)
}

/** User Model (Clerk) */

model User {
  id           String      @id @deny('update', true) // Should match clerk auth ID
  created_at   DateTime    @default(now()) @db.Timestamptz @deny('update', true)
  updated_at   DateTime    @updatedAt @db.Timestamptz

  display_name String      @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  email        String      @email @unique
  image_href   String?     @url

  topics       Topic[]
  topic_order  String[]

  clipboards   Clipboard[]

  @@auth
  @@map("users")

  @@allow("read", true)
  @@allow("update", auth().id == id)
}

model Clipboard extends WithMetadata {
  owner_id          String             @default(auth().id)
  owner             User               @relation(fields: [owner_id], references: [id])

  // Should only be attached to 1 of the below records
  topic             Topic?
  task              Task?
  project           Project?
  project_milestone ProjectMilestone?
  routine           Routine?

  notepad           String?
  checklist         ClipboardChecklist @json
  resources         ClipboardResources @json

  @@map('clipboards')

  @@allow('create,read,update', owner_id == auth().id)
}

type ClipboardChecklistItem {
  id      String
  title   String
  is_done Boolean
}

type ClipboardChecklist {
  items ClipboardChecklistItem[]
}

type ClipboardResourceItem {
  id      String
  title   String
  content String
}

type ClipboardResources {
  items ClipboardResourceItem[]
}

model Topic extends WithMetadata, WithClipboard {
  owner_id    String         @default(auth().id)
  owner       User           @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  tasks       Task[]
  routines    Routine[]
  projects    Project[]

  item_orders TopicItemOrder @json

  @@map('topics')
  @@allow('all', owner_id == auth().id)
}

type TopicItemOrderItem {
  key   String
  order String[]
}

type TopicItemOrder {
  items TopicItemOrderItem[]
}

model Routine extends WithMetadata, WithClipboard {
  topic_id       String
  topic          Topic         @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  task_instances RoutineTask[]

  @@map('routines')
  @@unique([id,topic_id])

  @@allow('all', topic.owner_id == auth().id)
}

model Project extends WithMetadata, WithClipboard {
  topic_id   String
  topic      Topic              @relation(fields: [topic_id], references: [id], onDelete: Cascade)

  milestones ProjectMilestone[]
  tasks      ProjectTask[]

  @@map('projects')
  @@unique([id, topic_id])

  @@allow('all', topic.owner_id == auth().id)
}

model ProjectMilestone extends WithMetadata, WithClipboard {
  project_id String
  project    Project       @relation(fields: [project_id], references: [id], onDelete: Cascade)

  tasks      ProjectTask[]

  @@map('project_milestones')
  @@unique([id, project_id])

  @@allow('all', project.topic.owner_id == auth().id)
}

/** Task Models */

model Task extends WithMetadata, WithClipboard {
  topic_id String
  topic    Topic      @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  type     String
  status   TaskStatus
  done_at  DateTime   @db.Timestamptz

  @@delegate(type)
  @@map('tasks')
  @@allow('all', topic.owner_id == auth().id)
}

enum TaskStatus {
  READY
  PENDING
  DONE
  @@map('TASK_STATUS')
}

model AdhocTask extends Task {
  @@map('adhoc_tasks')
}

model RoutineTask extends Task {
  routine_id       String
  routine_topic_id String
  routine          Routine @relation(fields: [routine_id, routine_topic_id], references: [id, topic_id], onDelete: Cascade)

  instance_number  Int

  @@map('routine_tasks')
  @@unique([routine_id, instance_number])
  
  @@validate(routine_topic_id == topic_id, 'invalid topic_id')
}


model ProjectTask extends Task {
  project_id                   String
  project_topic_id             String
  project                      Project          @relation(fields: [project_id, project_topic_id], references: [id, topic_id], onDelete: Cascade)

  project_milestone_id         String
  project_milestone_project_id String
  project_milestone            ProjectMilestone @relation(fields: [project_milestone_id, project_milestone_id], references: [id, project_id], onDelete: Cascade)

  @@map('project_milestone_tasks')

  @@validate(project_topic_id == topic_id, 'invalid topic_id')
  @@validate(project_id == project_milestone_project_id, 'invalid project_id')
}