generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  output = '../generated/prisma-schema/schema.prisma'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "../generated/hooks"
  target = "react"
  version = "v5"
}

model User {
  id                    String   @id @deny('update', true) // Should match clerk auth ID
  created_at            DateTime @default(now()) @db.Timestamptz @deny('update', true)
  display_name          String   @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  email                 String   @email @unique
  associated_as_persons Person[] @relation('associated_as_persons')

  persons               Person[] @relation('created_persons')
  topics                Topic[]
  posts                 Post[]
  tasks                 Task[]

  @@auth
  @@allow("create,read", true)
  @@allow("update", auth().id == id)
  @@map("users")
}

model Person {
  id                  String   @id @default(cuid())
  created_at          DateTime @default(now()) @db.Timestamptz
  created_by_id       String   @default(auth().id)
  created_by          User     @relation('created_persons', fields: [created_by_id], references: [id])

  name                String   @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  contributing_topics Topic[]  @relation("topic_contributors")
  viewing_topics      Topic[]  @relation("topic_viewers")
  tasks               Task[]

  // The user who is later associated with this person
  associated_user_id  String?
  associated_user     User?    @relation('associated_as_persons', fields: [associated_user_id], references: [id])

  @@map("persons")
  @@allow('all', created_by_id == auth().id)
  @@unique([created_by_id, name])
}

model Topic {
  id            String      @id @default(cuid())
  created_at    DateTime    @default(now()) @db.Timestamptz
  created_by_id String      @default(auth().id)
  created_by    User        @relation(fields: [created_by_id], references: [id])

  title         String      @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description   String?

  contributors  Person[]    @relation("topic_contributors")
  viewers       Person[]    @relation("topic_viewers")
  is_public     Boolean     @default(false)

  status        TopicStatus @default(ACTIVE)
  posts         Post[]
  tasks         Task[]

  @@map("topics")
  @@allow("all", created_by_id == auth().id)
  @@allow("read", contributors?[associated_user_id == auth().id])
  @@allow("read", viewers?[associated_user_id == auth().id])
}

model Post {
  id            String   @id @default(cuid())
  created_at    DateTime @default(now()) @db.Timestamptz
  created_by_id String   @default(auth().id)
  created_by    User     @relation(fields: [created_by_id], references: [id])

  topic_id      String
  topic         Topic    @relation(fields: [topic_id], references: [id])

  content       String
  is_archived   Boolean  @default(false)

  @@map("posts")
  @@allow("all", created_by_id == auth().id || topic.created_by_id == auth().id)
  @@allow("create,read", topic.contributors?[associated_user_id == auth().id])
  @@allow("read", topic.viewers?[associated_user_id == auth().id])
}

model Task {
  id                 String     @id @default(cuid())
  created_at         DateTime   @default(now()) @db.Timestamptz
  created_by_id      String     @default(auth().id)
  created_by         User       @relation(fields: [created_by_id], references: [id])

  topic_id           String
  topic              Topic      @relation(fields: [topic_id], references: [id])
  order              Int
  @@unique([topic_id, order])

  title              String     @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  timing             TaskTiming @default(NO_TARGET)
  timing_last_set_at DateTime?  @db.Timestamptz
  size_minutes       Int?       @gte(5, "size must be at least 5 minnutes") @lte(240, "size must be at most 4 hours (240 minutes)")
  is_done            Boolean    @default(false)
  done_at            DateTime?  @db.Timestamptz

  doer_id            String?
  doer               Person?    @relation(fields: [doer_id], references: [id])

  @@validate(is_done == false || done_at != null, "done_at must be set if is_done is true")
  @@allow("all", created_by_id == auth().id)
  @@allow("read,update", topic.contributors?[associated_user_id == auth().id] && doer.associated_user_id == auth().id)
  @@allow("read", topic.contributors?[associated_user_id == auth().id])
  @@allow("read", topic.viewers?[associated_user_id == auth().id])
  @@map("tasks")
}


enum TopicStatus {
  ACTIVE
  CLOSED
  CANCELED
  MERGED
  FORKED

  @@map("TOPIC_STATUS")
}

enum TaskTiming {
  TODAY
  THIS_WEEK
  NEXT_WEEK
  THIS_MONTH
  NEXT_MONTH
  SOMEDAY
  NO_TARGET

  @@map("TASK_TIMING")
}