generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

plugin prisma {
  provider = '@core/prisma'
  output = '../generated/prisma-schema/schema.prisma'
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  output = "../generated/hooks"
  target = "react"
  version = "v5"
}

model User {
  id           String     @id @deny('update', true) // Should match clerk auth ID
  created_at   DateTime   @default(now()) @db.Timestamptz @deny('update', true)
  updated_at   DateTime   @updatedAt @db.Timestamptz

  display_name String     @trim @length(min: 1, max: 50, "name must be between 1 and 50 characters")
  email        String     @email @unique
  image_href   String?    @url

  topics       Topic[]
  resources    Resource[]
  tasklists    Tasklist[]
  tasks        Task[]

  @@auth
  @@map("users")
  @@allow("create,read", true)
  @@allow("update", auth().id == id)
}

model Topic {
  id            String     @id @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz
  updated_at    DateTime   @updatedAt @db.Timestamptz
  created_by_id String     @default(auth().id)
  created_by    User       @relation(fields: [created_by_id], references: [id])

  title         String     @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description   String?    @trim

  tasklists     Tasklist[]
  tasks         Task[]
  resources     Resource[]

  is_public     Boolean    @default(false)

  archived_at   DateTime?  @db.Timestamptz

  @@map("topics")
  @@allow("all", created_by_id == auth().id)
  @@allow("read", is_public == true)
}

model Resource {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now()) @db.Timestamptz
  updated_at    DateTime  @updatedAt @db.Timestamptz
  created_by_id String    @default(auth().id)
  created_by    User      @relation(fields: [created_by_id], references: [id])

  topic_id      String
  topic         Topic     @relation(fields: [topic_id], references: [id])

  is_private    Boolean   @default(true)

  title         String    @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  content       String    @trim

  archived_at   DateTime? @db.Timestamptz

  @@map("resources")
  @@allow("all", created_by_id == auth().id)
  @@allow("read", topic.is_public == true && is_private != true)
}

model Tasklist {
  id            String         @id @default(cuid())
  created_at    DateTime       @default(now()) @db.Timestamptz
  updated_at    DateTime       @updatedAt @db.Timestamptz
  created_by_id String         @default(auth().id)
  created_by    User           @relation(fields: [created_by_id], references: [id])

  topic_id      String
  topic         Topic          @relation(fields: [topic_id], references: [id])
  @@unique([id, topic_id])

  is_private    Boolean        @default(true)

  title         String         @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description   String?        @trim
  target        RelativeTarget @default(NONE)

  tasks         Task[]
  task_order    String[]

  archived_at   DateTime?      @db.Timestamptz

  @@map("tasklists")
  @@allow("all", created_by_id == auth().id)
  @@allow("read", topic.is_public == true && is_private != true)
}

model Task {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @updatedAt @db.Timestamptz
  created_by_id     String    @default(auth().id)
  created_by        User      @relation(fields: [created_by_id], references: [id])

  topic_id          String
  topic             Topic     @relation(fields: [topic_id], references: [id]) // must be the same as the tasklist's topic

  tasklist_id       String
  tasklist_topic_id String
  tasklist          Tasklist  @relation(fields: [tasklist_id, tasklist_topic_id], references: [id, topic_id])

  title             String    @trim @length(min: 1, max: 300, "title must be between 1 and 300 characters")
  description       String?   @trim
  size_minutes      Int?
  done_at           DateTime? @db.Timestamptz

  archived_at       DateTime? @db.Timestamptz


  @@map("tasks")
  @@validate(topic_id == tasklist_topic_id, "topic_id must match tasklist_topic_id")
  @@allow("all", created_by_id == auth().id)
  @@allow("read", topic.is_public == true && tasklist.is_private != false)
}

enum RelativeTarget {
  TODAY
  THIS_WEEK
  NEXT_WEEK
  THIS_MONTH
  NEXT_MONTH
  SOMEDAY
  NONE
  @@map("RELATIVE_TARGET")
}
