/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ProjectTask } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateProjectTask(options?: Omit<(UseMutationOptions<(ProjectTask | undefined), DefaultError, Prisma.ProjectTaskCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskCreateArgs, DefaultError, ProjectTask, true>('ProjectTask', 'POST', `${endpoint}/projectTask/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyProjectTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectTaskCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectTask', 'POST', `${endpoint}/projectTask/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyProjectTask<TArgs extends Prisma.ProjectTaskFindManyArgs, TQueryFnData = Array<Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findMany`, args, options, fetch);
}

export function useInfiniteFindManyProjectTask<TArgs extends Prisma.ProjectTaskFindManyArgs, TQueryFnData = Array<Prisma.ProjectTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findMany`, args, options, fetch);
}

export function useSuspenseFindManyProjectTask<TArgs extends Prisma.ProjectTaskFindManyArgs, TQueryFnData = Array<Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyProjectTask<TArgs extends Prisma.ProjectTaskFindManyArgs, TQueryFnData = Array<Prisma.ProjectTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findMany`, args, options, fetch);
}

export function useFindUniqueProjectTask<TArgs extends Prisma.ProjectTaskFindUniqueArgs, TQueryFnData = Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueProjectTask<TArgs extends Prisma.ProjectTaskFindUniqueArgs, TQueryFnData = Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findUnique`, args, options, fetch);
}

export function useFindFirstProjectTask<TArgs extends Prisma.ProjectTaskFindFirstArgs, TQueryFnData = Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstProjectTask<TArgs extends Prisma.ProjectTaskFindFirstArgs, TQueryFnData = Prisma.ProjectTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/findFirst`, args, options, fetch);
}

export function useUpdateProjectTask(options?: Omit<(UseMutationOptions<(ProjectTask | undefined), DefaultError, Prisma.ProjectTaskUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskUpdateArgs, DefaultError, ProjectTask, true>('ProjectTask', 'PUT', `${endpoint}/projectTask/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyProjectTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectTaskUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectTask', 'PUT', `${endpoint}/projectTask/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertProjectTask(options?: Omit<(UseMutationOptions<(ProjectTask | undefined), DefaultError, Prisma.ProjectTaskUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskUpsertArgs, DefaultError, ProjectTask, true>('ProjectTask', 'POST', `${endpoint}/projectTask/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteProjectTask(options?: Omit<(UseMutationOptions<(ProjectTask | undefined), DefaultError, Prisma.ProjectTaskDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskDeleteArgs, DefaultError, ProjectTask, true>('ProjectTask', 'DELETE', `${endpoint}/projectTask/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectTask, Prisma.ProjectTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyProjectTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectTaskDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectTaskDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectTask', 'DELETE', `${endpoint}/projectTask/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectTaskDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectTaskDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectTaskDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProjectTask<TArgs extends Prisma.ProjectTaskAggregateArgs, TQueryFnData = Prisma.GetProjectTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProjectTask<TArgs extends Prisma.ProjectTaskAggregateArgs, TQueryFnData = Prisma.GetProjectTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/aggregate`, args, options, fetch);
}

export function useGroupByProjectTask<TArgs extends Prisma.ProjectTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProjectTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProjectTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProjectTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProjectTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProjectTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByProjectTask<TArgs extends Prisma.ProjectTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProjectTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProjectTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProjectTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProjectTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProjectTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/groupBy`, args, options, fetch);
}

export function useCountProjectTask<TArgs extends Prisma.ProjectTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProjectTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/count`, args, options, fetch);
}

export function useSuspenseCountProjectTask<TArgs extends Prisma.ProjectTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProjectTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectTaskCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectTask', `${endpoint}/projectTask/count`, args, options, fetch);
}
import type { TaskStatus } from '@zenstackhq/runtime/models';

export function useCheckProjectTask<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clipboard_id?: string; title?: string; id?: string; topic_id?: string; type?: string; status?: TaskStatus; project_id?: string; project_topic_id?: string; project_milestone_id?: string; project_milestone_project_id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ProjectTask', `${endpoint}/projectTask/check`, args, options, fetch);
}
