/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TaskChecklistItem } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTaskChecklistItem(options?: Omit<(UseMutationOptions<(TaskChecklistItem | undefined), DefaultError, Prisma.TaskChecklistItemCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemCreateArgs, DefaultError, TaskChecklistItem, true>('TaskChecklistItem', 'POST', `${endpoint}/taskChecklistItem/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTaskChecklistItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TaskChecklistItemCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TaskChecklistItem', 'POST', `${endpoint}/taskChecklistItem/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindManyArgs, TQueryFnData = Array<Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindManyArgs, TQueryFnData = Array<Prisma.TaskChecklistItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindManyArgs, TQueryFnData = Array<Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindManyArgs, TQueryFnData = Array<Prisma.TaskChecklistItemGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findMany`, args, options, fetch);
}

export function useFindUniqueTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindUniqueArgs, TQueryFnData = Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindUniqueArgs, TQueryFnData = Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findUnique`, args, options, fetch);
}

export function useFindFirstTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindFirstArgs, TQueryFnData = Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemFindFirstArgs, TQueryFnData = Prisma.TaskChecklistItemGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/findFirst`, args, options, fetch);
}

export function useUpdateTaskChecklistItem(options?: Omit<(UseMutationOptions<(TaskChecklistItem | undefined), DefaultError, Prisma.TaskChecklistItemUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemUpdateArgs, DefaultError, TaskChecklistItem, true>('TaskChecklistItem', 'PUT', `${endpoint}/taskChecklistItem/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTaskChecklistItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TaskChecklistItemUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TaskChecklistItem', 'PUT', `${endpoint}/taskChecklistItem/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTaskChecklistItem(options?: Omit<(UseMutationOptions<(TaskChecklistItem | undefined), DefaultError, Prisma.TaskChecklistItemUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemUpsertArgs, DefaultError, TaskChecklistItem, true>('TaskChecklistItem', 'POST', `${endpoint}/taskChecklistItem/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTaskChecklistItem(options?: Omit<(UseMutationOptions<(TaskChecklistItem | undefined), DefaultError, Prisma.TaskChecklistItemDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemDeleteArgs, DefaultError, TaskChecklistItem, true>('TaskChecklistItem', 'DELETE', `${endpoint}/taskChecklistItem/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TaskChecklistItem, Prisma.TaskChecklistItemGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTaskChecklistItem(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TaskChecklistItemDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TaskChecklistItemDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TaskChecklistItem', 'DELETE', `${endpoint}/taskChecklistItem/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TaskChecklistItemDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TaskChecklistItemDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TaskChecklistItemDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemAggregateArgs, TQueryFnData = Prisma.GetTaskChecklistItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemAggregateArgs, TQueryFnData = Prisma.GetTaskChecklistItemAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/aggregate`, args, options, fetch);
}

export function useGroupByTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TaskChecklistItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.TaskChecklistItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TaskChecklistItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TaskChecklistItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TaskChecklistItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TaskChecklistItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TaskChecklistItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TaskChecklistItemGroupByArgs['orderBy'] } : { orderBy?: Prisma.TaskChecklistItemGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TaskChecklistItemGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TaskChecklistItemGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TaskChecklistItemGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TaskChecklistItemGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TaskChecklistItemGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/groupBy`, args, options, fetch);
}

export function useCountTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TaskChecklistItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/count`, args, options, fetch);
}

export function useSuspenseCountTaskChecklistItem<TArgs extends Prisma.TaskChecklistItemCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TaskChecklistItemCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TaskChecklistItemCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/count`, args, options, fetch);
}

export function useCheckTaskChecklistItem<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; created_by_id?: string; task_id?: string; order?: number; text?: string; is_checked?: boolean }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TaskChecklistItem', `${endpoint}/taskChecklistItem/check`, args, options, fetch);
}
