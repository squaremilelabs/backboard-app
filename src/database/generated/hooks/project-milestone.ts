/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ProjectMilestone } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateProjectMilestone(options?: Omit<(UseMutationOptions<(ProjectMilestone | undefined), DefaultError, Prisma.ProjectMilestoneCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneCreateArgs, DefaultError, ProjectMilestone, true>('ProjectMilestone', 'POST', `${endpoint}/projectMilestone/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyProjectMilestone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectMilestoneCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectMilestone', 'POST', `${endpoint}/projectMilestone/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindManyArgs, TQueryFnData = Array<Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findMany`, args, options, fetch);
}

export function useInfiniteFindManyProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindManyArgs, TQueryFnData = Array<Prisma.ProjectMilestoneGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findMany`, args, options, fetch);
}

export function useSuspenseFindManyProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindManyArgs, TQueryFnData = Array<Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindManyArgs, TQueryFnData = Array<Prisma.ProjectMilestoneGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findMany`, args, options, fetch);
}

export function useFindUniqueProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindUniqueArgs, TQueryFnData = Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindUniqueArgs, TQueryFnData = Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findUnique`, args, options, fetch);
}

export function useFindFirstProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindFirstArgs, TQueryFnData = Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstProjectMilestone<TArgs extends Prisma.ProjectMilestoneFindFirstArgs, TQueryFnData = Prisma.ProjectMilestoneGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/findFirst`, args, options, fetch);
}

export function useUpdateProjectMilestone(options?: Omit<(UseMutationOptions<(ProjectMilestone | undefined), DefaultError, Prisma.ProjectMilestoneUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneUpdateArgs, DefaultError, ProjectMilestone, true>('ProjectMilestone', 'PUT', `${endpoint}/projectMilestone/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyProjectMilestone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectMilestoneUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectMilestone', 'PUT', `${endpoint}/projectMilestone/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertProjectMilestone(options?: Omit<(UseMutationOptions<(ProjectMilestone | undefined), DefaultError, Prisma.ProjectMilestoneUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneUpsertArgs, DefaultError, ProjectMilestone, true>('ProjectMilestone', 'POST', `${endpoint}/projectMilestone/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteProjectMilestone(options?: Omit<(UseMutationOptions<(ProjectMilestone | undefined), DefaultError, Prisma.ProjectMilestoneDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneDeleteArgs, DefaultError, ProjectMilestone, true>('ProjectMilestone', 'DELETE', `${endpoint}/projectMilestone/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProjectMilestone, Prisma.ProjectMilestoneGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyProjectMilestone(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProjectMilestoneDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProjectMilestoneDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ProjectMilestone', 'DELETE', `${endpoint}/projectMilestone/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProjectMilestoneDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProjectMilestoneDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProjectMilestoneDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProjectMilestone<TArgs extends Prisma.ProjectMilestoneAggregateArgs, TQueryFnData = Prisma.GetProjectMilestoneAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProjectMilestone<TArgs extends Prisma.ProjectMilestoneAggregateArgs, TQueryFnData = Prisma.GetProjectMilestoneAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/aggregate`, args, options, fetch);
}

export function useGroupByProjectMilestone<TArgs extends Prisma.ProjectMilestoneGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProjectMilestoneGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProjectMilestoneGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProjectMilestoneGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProjectMilestoneGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectMilestoneGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectMilestoneGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProjectMilestoneGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByProjectMilestone<TArgs extends Prisma.ProjectMilestoneGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProjectMilestoneGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProjectMilestoneGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProjectMilestoneGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.ProjectMilestoneGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectMilestoneGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.ProjectMilestoneGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProjectMilestoneGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/groupBy`, args, options, fetch);
}

export function useCountProjectMilestone<TArgs extends Prisma.ProjectMilestoneCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProjectMilestoneCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/count`, args, options, fetch);
}

export function useSuspenseCountProjectMilestone<TArgs extends Prisma.ProjectMilestoneCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProjectMilestoneCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProjectMilestoneCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProjectMilestone', `${endpoint}/projectMilestone/count`, args, options, fetch);
}

export function useCheckProjectMilestone<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clipboard_id?: string; id?: string; project_id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ProjectMilestone', `${endpoint}/projectMilestone/check`, args, options, fetch);
}
