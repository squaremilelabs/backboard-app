/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, AdhocTask } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateAdhocTask(options?: Omit<(UseMutationOptions<(AdhocTask | undefined), DefaultError, Prisma.AdhocTaskCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskCreateArgs, DefaultError, AdhocTask, true>('AdhocTask', 'POST', `${endpoint}/adhocTask/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyAdhocTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AdhocTaskCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('AdhocTask', 'POST', `${endpoint}/adhocTask/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyAdhocTask<TArgs extends Prisma.AdhocTaskFindManyArgs, TQueryFnData = Array<Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findMany`, args, options, fetch);
}

export function useInfiniteFindManyAdhocTask<TArgs extends Prisma.AdhocTaskFindManyArgs, TQueryFnData = Array<Prisma.AdhocTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findMany`, args, options, fetch);
}

export function useSuspenseFindManyAdhocTask<TArgs extends Prisma.AdhocTaskFindManyArgs, TQueryFnData = Array<Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyAdhocTask<TArgs extends Prisma.AdhocTaskFindManyArgs, TQueryFnData = Array<Prisma.AdhocTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findMany`, args, options, fetch);
}

export function useFindUniqueAdhocTask<TArgs extends Prisma.AdhocTaskFindUniqueArgs, TQueryFnData = Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueAdhocTask<TArgs extends Prisma.AdhocTaskFindUniqueArgs, TQueryFnData = Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findUnique`, args, options, fetch);
}

export function useFindFirstAdhocTask<TArgs extends Prisma.AdhocTaskFindFirstArgs, TQueryFnData = Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstAdhocTask<TArgs extends Prisma.AdhocTaskFindFirstArgs, TQueryFnData = Prisma.AdhocTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/findFirst`, args, options, fetch);
}

export function useUpdateAdhocTask(options?: Omit<(UseMutationOptions<(AdhocTask | undefined), DefaultError, Prisma.AdhocTaskUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskUpdateArgs, DefaultError, AdhocTask, true>('AdhocTask', 'PUT', `${endpoint}/adhocTask/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyAdhocTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AdhocTaskUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('AdhocTask', 'PUT', `${endpoint}/adhocTask/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertAdhocTask(options?: Omit<(UseMutationOptions<(AdhocTask | undefined), DefaultError, Prisma.AdhocTaskUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskUpsertArgs, DefaultError, AdhocTask, true>('AdhocTask', 'POST', `${endpoint}/adhocTask/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteAdhocTask(options?: Omit<(UseMutationOptions<(AdhocTask | undefined), DefaultError, Prisma.AdhocTaskDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskDeleteArgs, DefaultError, AdhocTask, true>('AdhocTask', 'DELETE', `${endpoint}/adhocTask/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, AdhocTask, Prisma.AdhocTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyAdhocTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.AdhocTaskDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.AdhocTaskDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('AdhocTask', 'DELETE', `${endpoint}/adhocTask/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.AdhocTaskDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.AdhocTaskDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.AdhocTaskDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateAdhocTask<TArgs extends Prisma.AdhocTaskAggregateArgs, TQueryFnData = Prisma.GetAdhocTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateAdhocTask<TArgs extends Prisma.AdhocTaskAggregateArgs, TQueryFnData = Prisma.GetAdhocTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/aggregate`, args, options, fetch);
}

export function useGroupByAdhocTask<TArgs extends Prisma.AdhocTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AdhocTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.AdhocTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AdhocTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AdhocTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AdhocTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AdhocTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AdhocTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByAdhocTask<TArgs extends Prisma.AdhocTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.AdhocTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.AdhocTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.AdhocTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.AdhocTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.AdhocTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.AdhocTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.AdhocTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/groupBy`, args, options, fetch);
}

export function useCountAdhocTask<TArgs extends Prisma.AdhocTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AdhocTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/count`, args, options, fetch);
}

export function useSuspenseCountAdhocTask<TArgs extends Prisma.AdhocTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.AdhocTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.AdhocTaskCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('AdhocTask', `${endpoint}/adhocTask/count`, args, options, fetch);
}
import type { TaskStatus } from '@zenstackhq/runtime/models';

export function useCheckAdhocTask<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clipboard_id?: string; title?: string; id?: string; topic_id?: string; type?: string; status?: TaskStatus }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('AdhocTask', `${endpoint}/adhocTask/check`, args, options, fetch);
}
