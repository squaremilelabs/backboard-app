/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, RoutineTask } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateRoutineTask(options?: Omit<(UseMutationOptions<(RoutineTask | undefined), DefaultError, Prisma.RoutineTaskCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskCreateArgs, DefaultError, RoutineTask, true>('RoutineTask', 'POST', `${endpoint}/routineTask/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyRoutineTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoutineTaskCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('RoutineTask', 'POST', `${endpoint}/routineTask/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyRoutineTask<TArgs extends Prisma.RoutineTaskFindManyArgs, TQueryFnData = Array<Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findMany`, args, options, fetch);
}

export function useInfiniteFindManyRoutineTask<TArgs extends Prisma.RoutineTaskFindManyArgs, TQueryFnData = Array<Prisma.RoutineTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findMany`, args, options, fetch);
}

export function useSuspenseFindManyRoutineTask<TArgs extends Prisma.RoutineTaskFindManyArgs, TQueryFnData = Array<Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyRoutineTask<TArgs extends Prisma.RoutineTaskFindManyArgs, TQueryFnData = Array<Prisma.RoutineTaskGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findMany`, args, options, fetch);
}

export function useFindUniqueRoutineTask<TArgs extends Prisma.RoutineTaskFindUniqueArgs, TQueryFnData = Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueRoutineTask<TArgs extends Prisma.RoutineTaskFindUniqueArgs, TQueryFnData = Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findUnique`, args, options, fetch);
}

export function useFindFirstRoutineTask<TArgs extends Prisma.RoutineTaskFindFirstArgs, TQueryFnData = Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstRoutineTask<TArgs extends Prisma.RoutineTaskFindFirstArgs, TQueryFnData = Prisma.RoutineTaskGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/findFirst`, args, options, fetch);
}

export function useUpdateRoutineTask(options?: Omit<(UseMutationOptions<(RoutineTask | undefined), DefaultError, Prisma.RoutineTaskUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskUpdateArgs, DefaultError, RoutineTask, true>('RoutineTask', 'PUT', `${endpoint}/routineTask/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyRoutineTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoutineTaskUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('RoutineTask', 'PUT', `${endpoint}/routineTask/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertRoutineTask(options?: Omit<(UseMutationOptions<(RoutineTask | undefined), DefaultError, Prisma.RoutineTaskUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskUpsertArgs, DefaultError, RoutineTask, true>('RoutineTask', 'POST', `${endpoint}/routineTask/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteRoutineTask(options?: Omit<(UseMutationOptions<(RoutineTask | undefined), DefaultError, Prisma.RoutineTaskDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskDeleteArgs, DefaultError, RoutineTask, true>('RoutineTask', 'DELETE', `${endpoint}/routineTask/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, RoutineTask, Prisma.RoutineTaskGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyRoutineTask(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.RoutineTaskDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.RoutineTaskDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('RoutineTask', 'DELETE', `${endpoint}/routineTask/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.RoutineTaskDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.RoutineTaskDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.RoutineTaskDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateRoutineTask<TArgs extends Prisma.RoutineTaskAggregateArgs, TQueryFnData = Prisma.GetRoutineTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateRoutineTask<TArgs extends Prisma.RoutineTaskAggregateArgs, TQueryFnData = Prisma.GetRoutineTaskAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/aggregate`, args, options, fetch);
}

export function useGroupByRoutineTask<TArgs extends Prisma.RoutineTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RoutineTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.RoutineTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RoutineTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RoutineTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RoutineTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RoutineTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoutineTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByRoutineTask<TArgs extends Prisma.RoutineTaskGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.RoutineTaskGroupByArgs['orderBy'] } : { orderBy?: Prisma.RoutineTaskGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.RoutineTaskGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.RoutineTaskGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.RoutineTaskGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.RoutineTaskGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.RoutineTaskGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/groupBy`, args, options, fetch);
}

export function useCountRoutineTask<TArgs extends Prisma.RoutineTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RoutineTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/count`, args, options, fetch);
}

export function useSuspenseCountRoutineTask<TArgs extends Prisma.RoutineTaskCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.RoutineTaskCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.RoutineTaskCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('RoutineTask', `${endpoint}/routineTask/count`, args, options, fetch);
}
import type { TaskStatus } from '@zenstackhq/runtime/models';

export function useCheckRoutineTask<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { clipboard_id?: string; title?: string; id?: string; topic_id?: string; type?: string; status?: TaskStatus; routine_id?: string; routine_topic_id?: string; instance_number?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('RoutineTask', `${endpoint}/routineTask/check`, args, options, fetch);
}
