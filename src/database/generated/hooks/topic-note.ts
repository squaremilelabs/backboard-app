/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, TopicNote } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateTopicNote(options?: Omit<(UseMutationOptions<(TopicNote | undefined), DefaultError, Prisma.TopicNoteCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteCreateArgs, DefaultError, TopicNote, true>('TopicNote', 'POST', `${endpoint}/topicNote/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyTopicNote(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TopicNoteCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('TopicNote', 'POST', `${endpoint}/topicNote/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyTopicNote<TArgs extends Prisma.TopicNoteFindManyArgs, TQueryFnData = Array<Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findMany`, args, options, fetch);
}

export function useInfiniteFindManyTopicNote<TArgs extends Prisma.TopicNoteFindManyArgs, TQueryFnData = Array<Prisma.TopicNoteGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findMany`, args, options, fetch);
}

export function useSuspenseFindManyTopicNote<TArgs extends Prisma.TopicNoteFindManyArgs, TQueryFnData = Array<Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyTopicNote<TArgs extends Prisma.TopicNoteFindManyArgs, TQueryFnData = Array<Prisma.TopicNoteGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findMany`, args, options, fetch);
}

export function useFindUniqueTopicNote<TArgs extends Prisma.TopicNoteFindUniqueArgs, TQueryFnData = Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueTopicNote<TArgs extends Prisma.TopicNoteFindUniqueArgs, TQueryFnData = Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findUnique`, args, options, fetch);
}

export function useFindFirstTopicNote<TArgs extends Prisma.TopicNoteFindFirstArgs, TQueryFnData = Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstTopicNote<TArgs extends Prisma.TopicNoteFindFirstArgs, TQueryFnData = Prisma.TopicNoteGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/findFirst`, args, options, fetch);
}

export function useUpdateTopicNote(options?: Omit<(UseMutationOptions<(TopicNote | undefined), DefaultError, Prisma.TopicNoteUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteUpdateArgs, DefaultError, TopicNote, true>('TopicNote', 'PUT', `${endpoint}/topicNote/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyTopicNote(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TopicNoteUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('TopicNote', 'PUT', `${endpoint}/topicNote/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertTopicNote(options?: Omit<(UseMutationOptions<(TopicNote | undefined), DefaultError, Prisma.TopicNoteUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteUpsertArgs, DefaultError, TopicNote, true>('TopicNote', 'POST', `${endpoint}/topicNote/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteTopicNote(options?: Omit<(UseMutationOptions<(TopicNote | undefined), DefaultError, Prisma.TopicNoteDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteDeleteArgs, DefaultError, TopicNote, true>('TopicNote', 'DELETE', `${endpoint}/topicNote/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, TopicNote, Prisma.TopicNoteGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyTopicNote(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.TopicNoteDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.TopicNoteDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('TopicNote', 'DELETE', `${endpoint}/topicNote/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.TopicNoteDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.TopicNoteDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.TopicNoteDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateTopicNote<TArgs extends Prisma.TopicNoteAggregateArgs, TQueryFnData = Prisma.GetTopicNoteAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TopicNoteAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateTopicNote<TArgs extends Prisma.TopicNoteAggregateArgs, TQueryFnData = Prisma.GetTopicNoteAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.TopicNoteAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/aggregate`, args, options, fetch);
}

export function useGroupByTopicNote<TArgs extends Prisma.TopicNoteGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TopicNoteGroupByArgs['orderBy'] } : { orderBy?: Prisma.TopicNoteGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TopicNoteGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TopicNoteGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TopicNoteGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TopicNoteGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TopicNoteGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByTopicNote<TArgs extends Prisma.TopicNoteGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.TopicNoteGroupByArgs['orderBy'] } : { orderBy?: Prisma.TopicNoteGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.TopicNoteGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.TopicNoteGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.TopicNoteGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.TopicNoteGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.TopicNoteGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/groupBy`, args, options, fetch);
}

export function useCountTopicNote<TArgs extends Prisma.TopicNoteCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TopicNoteCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/count`, args, options, fetch);
}

export function useSuspenseCountTopicNote<TArgs extends Prisma.TopicNoteCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.TopicNoteCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.TopicNoteCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('TopicNote', `${endpoint}/topicNote/count`, args, options, fetch);
}

export function useCheckTopicNote<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; created_by_id?: string; topic_id?: string; content?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('TopicNote', `${endpoint}/topicNote/check`, args, options, fetch);
}
