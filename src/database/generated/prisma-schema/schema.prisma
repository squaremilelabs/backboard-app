//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TaskStatus {
  TODO
  DRAFT
  DONE

  @@map("TASK_STATUS")
}

model User {
  id               String     @id()
  created_at       DateTime   @default(now()) @db.Timestamptz()
  updated_at       DateTime   @updatedAt() @db.Timestamptz()
  display_name     String
  email            String     @unique()
  image_href       String?
  tasks            Task[]
  tasklists        Tasklist[]
  timeslots        Timeslot[]
  inbox_task_order String[]

  @@map("users")
}

model Task {
  id                   String     @id() @default(cuid())
  created_at           DateTime   @default(now()) @db.Timestamptz()
  updated_at           DateTime   @updatedAt() @db.Timestamptz()
  created_by_id        String
  created_by           User       @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  archived_at          DateTime?  @db.Timestamptz()
  title                String
  content              String?
  status               TaskStatus @default(DRAFT)
  size_minutes         Int        @default(5)
  completed_at         DateTime?  @db.Timestamptz()
  tasklist_id          String?
  tasklist             Tasklist?  @relation(fields: [tasklist_id], references: [id], onDelete: SetNull)
  timeslot_id          String?
  timeslot_tasklist_id String?
  timeslot             Timeslot?  @relation(fields: [timeslot_id, timeslot_tasklist_id], references: [id, tasklist_id], onDelete: SetNull)

  @@map("tasks")
}

model Tasklist {
  id            String     @id() @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz()
  updated_at    DateTime   @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User       @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  archived_at   DateTime?  @db.Timestamptz()
  title         String
  content       String?
  task_order    String[]
  emoji         Json?
  tasks         Task[]
  timeslots     Timeslot[]

  @@map("tasklists")
}

model Timeslot {
  id                String    @id() @default(cuid())
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt() @db.Timestamptz()
  created_by_id     String
  created_by        User      @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  archived_at       DateTime? @db.Timestamptz()
  date_string       String
  start_time_string String
  end_time_string   String
  task_order        String[]
  tasklist_id       String
  tasklist          Tasklist  @relation(fields: [tasklist_id], references: [id], onDelete: Cascade)
  tasks             Task[]

  @@unique([id, tasklist_id])
  @@map("timeslots")
}
