//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RelativeTarget {
  TODAY
  THIS_WEEK
  NEXT_WEEK
  THIS_MONTH
  NEXT_MONTH
  SOMEDAY
  NONE

  @@map("RELATIVE_TARGET")
}

model User {
  id           String     @id()
  created_at   DateTime   @default(now()) @db.Timestamptz()
  updated_at   DateTime   @updatedAt() @db.Timestamptz()
  display_name String
  email        String     @unique()
  image_href   String?
  topics       Topic[]
  resources    Resource[]
  tasklists    Tasklist[]
  tasks        Task[]

  @@map("users")
}

model Topic {
  id            String     @id() @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz()
  updated_at    DateTime   @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User       @relation(fields: [created_by_id], references: [id])
  title         String
  description   String?
  tasklists     Tasklist[]
  tasks         Task[]
  resources     Resource[]
  is_public     Boolean    @default(false)
  archived_at   DateTime?  @db.Timestamptz()

  @@map("topics")
}

model Resource {
  id            String    @id() @default(cuid())
  created_at    DateTime  @default(now()) @db.Timestamptz()
  updated_at    DateTime  @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User      @relation(fields: [created_by_id], references: [id])
  topic_id      String
  topic         Topic     @relation(fields: [topic_id], references: [id])
  is_public     Boolean   @default(false)
  title         String
  content       String?
  archived_at   DateTime? @db.Timestamptz()

  @@map("resources")
}

model Tasklist {
  id            String         @id() @default(cuid())
  created_at    DateTime       @default(now()) @db.Timestamptz()
  updated_at    DateTime       @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User           @relation(fields: [created_by_id], references: [id])
  topic_id      String
  topic         Topic          @relation(fields: [topic_id], references: [id])
  is_public     Boolean        @default(false)
  title         String
  description   String?
  target        RelativeTarget @default(NONE)
  tasks         Task[]
  task_order    String[]
  archived_at   DateTime?      @db.Timestamptz()

  @@unique([id, topic_id])
  @@map("tasklists")
}

model Task {
  id                String    @id() @default(cuid())
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt() @db.Timestamptz()
  created_by_id     String
  created_by        User      @relation(fields: [created_by_id], references: [id])
  topic_id          String
  topic             Topic     @relation(fields: [topic_id], references: [id])
  tasklist_id       String
  tasklist_topic_id String
  tasklist          Tasklist  @relation(fields: [tasklist_id, tasklist_topic_id], references: [id, topic_id])
  title             String
  description       String?
  size_minutes      Int?
  done_at           DateTime? @db.Timestamptz()
  archived_at       DateTime? @db.Timestamptz()

  @@map("tasks")
}
