//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RelativeTarget {
  TODAY
  THIS_WEEK
  NEXT_WEEK
  THIS_MONTH
  NEXT_MONTH
  SOMEDAY
  NONE

  @@map("RELATIVE_TARGET")
}

model User {
  id           String     @id()
  created_at   DateTime   @default(now()) @db.Timestamptz()
  updated_at   DateTime   @updatedAt() @db.Timestamptz()
  display_name String
  email        String     @unique()
  image_href   String?
  topics       Topic[]
  resources    Resource[]
  tasklists    Tasklist[]
  tasks        Task[]

  @@map("users")
}

model Topic {
  id            String     @id() @default(cuid())
  created_at    DateTime   @default(now()) @db.Timestamptz()
  updated_at    DateTime   @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User       @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  title         String
  description   String?
  is_public     Boolean    @default(false)
  archived_at   DateTime?  @db.Timestamptz()
  tasklists     Tasklist[]
  tasks         Task[]
  resources     Resource[]

  @@map("topics")
}

model Resource {
  id                String    @id() @default(cuid())
  created_at        DateTime  @default(now()) @db.Timestamptz()
  updated_at        DateTime  @updatedAt() @db.Timestamptz()
  created_by_id     String
  created_by        User      @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  title             String
  description       String?
  is_public         Boolean   @default(false)
  archived_at       DateTime? @db.Timestamptz()
  topic_id          String
  topic             Topic     @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  tasklist_id       String?
  tasklist_topic_id String?
  tasklist          Tasklist? @relation(fields: [tasklist_id, tasklist_topic_id], references: [id, topic_id], onDelete: SetNull)
  task_id           String?
  task_topic_id     String?
  task              Task?     @relation(fields: [task_id, task_topic_id], references: [id, topic_id], onDelete: SetNull)
  resource_type     String
  delegate_aux_note Note?
  delegate_aux_link Link?

  @@map("resources")
}

model Note {
  id                    String   @id()
  content               String?
  delegate_aux_resource Resource @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("resource_notes")
}

model Link {
  id                    String   @id()
  url                   String
  delegate_aux_resource Resource @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("resource_links")
}

model Tasklist {
  id            String         @id() @default(cuid())
  created_at    DateTime       @default(now()) @db.Timestamptz()
  updated_at    DateTime       @updatedAt() @db.Timestamptz()
  created_by_id String
  created_by    User           @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  title         String
  description   String?
  is_public     Boolean        @default(false)
  archived_at   DateTime?      @db.Timestamptz()
  topic_id      String
  topic         Topic          @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  target        RelativeTarget @default(NONE)
  tasks         Task[]
  resources     Resource[]
  task_order    String[]

  @@unique([id, topic_id])
  @@map("tasklists")
}

model Task {
  id                String     @id() @default(cuid())
  created_at        DateTime   @default(now()) @db.Timestamptz()
  updated_at        DateTime   @updatedAt() @db.Timestamptz()
  created_by_id     String
  created_by        User       @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  title             String
  description       String?
  is_public         Boolean    @default(false)
  archived_at       DateTime?  @db.Timestamptz()
  topic_id          String
  topic             Topic      @relation(fields: [topic_id], references: [id], onDelete: Cascade)
  tasklist_id       String
  tasklist_topic_id String
  tasklist          Tasklist   @relation(fields: [tasklist_id, tasklist_topic_id], references: [id, topic_id], onDelete: Cascade)
  resources         Resource[]
  size_minutes      Int?
  is_draft          Boolean    @default(true)
  done_at           DateTime?  @db.Timestamptz()

  @@unique([id, topic_id])
  @@map("tasks")
}
